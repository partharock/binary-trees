
using two unordered maps o2n space
 int checkMirrorTree(int n, int e, int A[], int B[]) {
        // code here
       unordered_map<int,vector<int> > umapa;
       unordered_map<int,vector<int> > umapb;
        int temp=A[0];
        for(int i=0;i<2*e;i+=2)
        {
            umapa[A[i]].push_back(A[i+1]);
            umapb[B[i]].push_back(B[i+1]);
        }
        for(auto k:umapa)
        {
            int temp=k.first;
            int size=k.second.size();
            for(int j=0;j<size;j++)
            {
                if( umapa[temp][j] !=umapb[temp][size-1 -j] )
                return 0;
            }
            
        }
        // cout<<endl;
        return 1;
    }
    
    using one unordered map on space
     int checkMirrorTree(int n, int e, int A[], int B[]) {
    unordered_map<int,stack<int> > umap;
    for(int i=0;i<2*e;i+=2)
      umap[A[i]].push(A[i+1]);
    
    for(int i=0;i<2*e;i+=2)
    {
        if(umap[B[i]].top()!=B[i+1])
        return 0;
        umap[B[i]].pop();
    }
    return 1;
    }
